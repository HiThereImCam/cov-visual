<<<<<<< HEAD
!function(){"use strict";var a,t,n={Alabama:"AL",Alaska:"AK",Arkansas:"AR",Arizona:"AZ",California:"CA",Colorado:"CO",Connecticut:"CT",Delaware:"DE",Florida:"FL",Georgia:"GA",Hawaii:"HI",Iowa:"IA",Idaho:"ID",Illinois:"IL",Indiana:"IN",Kansas:"KS",Kentucky:"KY",Louisiana:"LA",Massachusetts:"MA",Maryland:"MD",Maine:"ME",Michigan:"MI",Minnesota:"MN",Missouri:"MO",Mississippi:"MS",Montana:"MT","North Carolina":"NC","North Dakota":"ND",Nebraska:"NE",Nevada:"NV","New Hampshire":"NH","New Jersey":"NJ","New Mexico":"NM","New York":"NY",Ohio:"OH",Oklahoma:"OK",Oregon:"OR",Pennsylvania:"PA","Rhode Island":"RI","South Carolina":"SC","South Dakota":"SD",Tennessee:"TN",Texas:"TX",Utah:"UT",Virginia:"VA",Vermont:"VT",Washington:"WA",Wisconsin:"WI","West Virginia":"WV",Wyoming:"WY"},e=d3.select("#svg");axios.get("https://api.covidtracking.com/v1/us/current.json").then((function(a){covidUsData=a})),axios.get("https://api.covidtracking.com/v1/states/current.json").then((function(a){t=a,i()}));var i=function(){e.selectAll("path").data(a).enter().append("path").attr("d",d3.geoPath()).attr("fill",(function(a){var e=a.properties.name,i=t.data.find((function(a){return a.state===n[e]}));if(null!=i&&i.positive>1)return"red"}))};d3.json("https://cdn.jsdelivr.net/npm/us-atlas@3/states-albers-10m.json").then((function(t){a=topojson.feature(t,t.objects.states).features}))}();
=======
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./config/legend.js":
/*!**************************!*\
  !*** ./config/legend.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => __WEBPACK_DEFAULT_EXPORT__\n/* harmony export */ });\n// this legend function was written by Mike Bostock and posted on Observable HQ\nfunction legend() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      color = _ref.color,\n      title = _ref.title,\n      _ref$tickSize = _ref.tickSize,\n      tickSize = _ref$tickSize === void 0 ? 6 : _ref$tickSize,\n      _ref$width = _ref.width,\n      width = _ref$width === void 0 ? 320 : _ref$width,\n      _ref$height = _ref.height,\n      height = _ref$height === void 0 ? 44 + tickSize : _ref$height,\n      _ref$marginTop = _ref.marginTop,\n      marginTop = _ref$marginTop === void 0 ? 18 : _ref$marginTop,\n      _ref$marginRight = _ref.marginRight,\n      marginRight = _ref$marginRight === void 0 ? 0 : _ref$marginRight,\n      _ref$marginBottom = _ref.marginBottom,\n      marginBottom = _ref$marginBottom === void 0 ? 16 + tickSize : _ref$marginBottom,\n      _ref$marginLeft = _ref.marginLeft,\n      marginLeft = _ref$marginLeft === void 0 ? 0 : _ref$marginLeft,\n      _ref$ticks = _ref.ticks,\n      ticks = _ref$ticks === void 0 ? width / 64 : _ref$ticks,\n      tickFormat = _ref.tickFormat,\n      tickValues = _ref.tickValues;\n\n  var svg = d3.create(\"svg\").attr(\"width\", width).attr(\"height\", height).attr(\"viewBox\", [0, 0, width, height]).style(\"overflow\", \"visible\").style(\"display\", \"block\");\n  var x; // Continuous\n\n  if (color.interpolator) {\n    x = Object.assign(color.copy().interpolator(d3.interpolateRound(marginLeft, width - marginRight)), {\n      range: function range() {\n        return [marginLeft, width - marginRight];\n      }\n    });\n    svg.append(\"image\").attr(\"x\", marginLeft).attr(\"y\", marginTop).attr(\"width\", width - marginLeft - marginRight).attr(\"height\", height - marginTop - marginBottom).attr(\"preserveAspectRatio\", \"none\").attr(\"xlink:href\", ramp(color.interpolator()).toDataURL()); // scaleSequentialQuantile doesnâ€™t implement ticks or tickFormat.\n\n    if (!x.ticks) {\n      if (tickValues === undefined) {\n        var n = Math.round(ticks + 1);\n        tickValues = d3.range(n).map(function (i) {\n          return d3.quantile(color.domain(), i / (n - 1));\n        });\n      }\n\n      if (typeof tickFormat !== \"function\") {\n        tickFormat = d3.format(tickFormat === undefined ? \",f\" : tickFormat);\n      }\n    }\n  } // Discrete\n  else if (color.invertExtent) {\n      var thresholds = color.thresholds ? color.thresholds() // scaleQuantize\n      : color.quantiles ? color.quantiles() // scaleQuantile\n      : color.domain(); // scaleThreshold\n\n      var thresholdFormat = tickFormat === undefined ? function (d) {\n        return d;\n      } : typeof tickFormat === \"string\" ? d3.format(tickFormat) : tickFormat;\n      x = d3.scaleLinear().domain([-1, color.range().length - 1]).rangeRound([marginLeft, width - marginRight]);\n      svg.append(\"g\").selectAll(\"rect\").data(color.range()).join(\"rect\").attr(\"x\", function (d, i) {\n        return x(i - 1);\n      }).attr(\"y\", marginTop).attr(\"width\", function (d, i) {\n        return x(i) - x(i - 1);\n      }).attr(\"height\", height - marginTop - marginBottom).attr(\"fill\", function (d) {\n        return d;\n      });\n      tickValues = d3.range(thresholds.length);\n\n      tickFormat = function tickFormat(i) {\n        return thresholdFormat(thresholds[i], i);\n      };\n    }\n\n  svg.append(\"g\").attr(\"transform\", \"translate(0, \".concat(height - marginBottom, \")\")).call(d3.axisBottom(x).ticks(ticks, typeof tickFormat === \"string\" ? tickFormat : undefined).tickFormat(typeof tickFormat === \"function\" ? tickFormat : undefined).tickSize(tickSize).tickValues(tickValues)).call(function (g) {\n    return g.selectAll(\".tick line\").attr(\"y1\", marginTop + marginBottom - height);\n  }).call(function (g) {\n    return g.select(\".domain\").remove();\n  }).call(function (g) {\n    return g.append(\"text\").attr(\"y\", marginTop + marginBottom - height - 6).attr(\"fill\", \"currentColor\").attr(\"text-anchor\", \"start\").attr(\"font-weight\", \"bold\").text(title);\n  });\n  return svg.node();\n}\n\nfunction ramp(color) {\n  var n = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 256;\n  var canvas = document.createElement(\"canvas\");\n  var context = canvas.getContext(\"2d\");\n\n  for (var i = 0; i < n; ++i) {\n    context.fillStyle = color(i / (n - 1));\n    context.fillRect(i, 0, 1, 1);\n  }\n\n  return canvas;\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (legend);\n\n//# sourceURL=webpack://covid-visualization/./config/legend.js?");

/***/ }),

/***/ "./config/population.js":
/*!******************************!*\
  !*** ./config/population.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => __WEBPACK_DEFAULT_EXPORT__\n/* harmony export */ });\nvar statePopulation = {\n  Alabama: 4903185,\n  Alaska: 731545,\n  Arkansas: 3017804,\n  Arizona: 7278717,\n  California: 39512223,\n  Colorado: 5758736,\n  Connecticut: 3565287,\n  Delaware: 973764,\n  Florida: 21477737,\n  Georgia: 10617423,\n  Hawaii: 1415872,\n  Iowa: 3155070,\n  Idaho: 1787065,\n  Illinois: 12671821,\n  Indiana: 6732219,\n  Kansas: 2913314,\n  Kentucky: 4467673,\n  Louisiana: 4648794,\n  Massachusetts: 6892503,\n  Maryland: 6045680,\n  Maine: 1344212,\n  Michigan: 9986857,\n  Minnesota: 5639632,\n  Missouri: 6137428,\n  Mississippi: 2976149,\n  Montana: 1068778,\n  \"North Carolina\": 10488084,\n  \"North Dakota\": 762062,\n  Nebraska: 1934408,\n  Nevada: 3080156,\n  \"New Hampshire\": 3080156,\n  \"New Jersey\": 8882190,\n  \"New Mexico\": 2096829,\n  \"New York\": 19453561,\n  Ohio: 11689100,\n  Oklahoma: 3956971,\n  Oregon: 4217737,\n  Pennsylvania: 12801989,\n  \"Rhode Island\": 1059361,\n  \"South Carolina\": 5148714,\n  \"South Dakota\": 884659,\n  Tennessee: 6829174,\n  Texas: 28995881,\n  Utah: 3205958,\n  Virginia: 8535519,\n  Vermont: 623989,\n  Washington: 7614893,\n  Wisconsin: 5822434,\n  \"West Virginia\": 1792147,\n  Wyoming: 578759\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (statePopulation);\n\n//# sourceURL=webpack://covid-visualization/./config/population.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _config_population__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../config/population */ \"./config/population.js\");\n/* harmony import */ var _config_legend__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../config/legend */ \"./config/legend.js\");\n/* harmony import */ var htl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! htl */ \"./node_modules/htl/src/index.js\");\n\n\n\nvar height = 610;\nvar width = 975; //let padding = 20;\n// map takes in an object and callback\n\nvar svg = d3.select(\"body\").append(\"svg\").attr(\"width\", width).attr(\"height\", height);\nvar active = d3.select(null);\nvar path = d3.geoPath();\nvar usAlbersJson = d3.json(\"https://cdn.jsdelivr.net/npm/us-atlas@3/states-albers-10m.json\");\nvar day = new Date();\nvar stateVaxRecords = {};\nvar previousDayStateTotalVax = {};\nvar twoDaysAgoStateTotalVax = {};\nwindow.stateRecords = stateVaxRecords;\nwindow.previousDay = previousDayStateTotalVax;\nwindow.twoDaysAgo = twoDaysAgoStateTotalVax;\nvar date;\nvar stateVaxCSV = d3.csv(\"https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/vaccinations/us_state_vaccinations.csv\", function (stateVaxObj) {\n  // our world in data updates vaccine data at 12 PST everyday\n  var formatTime = d3.timeFormat(\"%Y-%m-%d\");\n  var today = new Date();\n  var yesterday = new Date(today);\n  yesterday.setDate(yesterday.getDate() - 1);\n  var todayMinusTwo = new Date(today);\n  todayMinusTwo.setDate(todayMinusTwo.getDate() - 2);\n  var currentDay = formatTime(today);\n  var previousDay = formatTime(yesterday);\n  var twoDaysAgo = formatTime(todayMinusTwo); // we don't know when the API updates. We just know it happens sometime between 12 and 1pm so\n  // I'm taking the max of the two to be safe.\n\n  if (today.getHours() < 13) {\n    if (stateVaxObj.date == twoDaysAgo) {\n      twoDaysAgoStateTotalVax[stateVaxObj.location] = stateVaxObj.people_fully_vaccinated;\n    }\n\n    if (stateVaxObj.date == previousDay) {\n      previousDayStateTotalVax[stateVaxObj.location] = stateVaxObj.people_fully_vaccinated;\n      date = stateVaxObj.date;\n      stateVaxRecords[stateVaxObj.location] = stateVaxObj;\n    }\n  } else {\n    if (stateVaxObj.date == previousDay) {\n      previousDayStateTotalVax[stateVaxObj.location] = stateVaxObj.people_fully_vaccinated;\n    }\n\n    if (stateVaxObj.date == currentDay) {\n      date = stateVaxObj.date;\n      stateVaxRecords[stateVaxObj.location] = stateVaxObj;\n    }\n  }\n});\nvar statePopulationObj = _config_population__WEBPACK_IMPORTED_MODULE_0__.default; // creating the legend at the top\n\nvar color = d3.scaleQuantize().domain([0, 100]).range(d3.schemeGreens[8]);\nsvg.append(\"g\").attr(\"transform\", \"translate(610,20)\").append(function () {\n  return (0,_config_legend__WEBPACK_IMPORTED_MODULE_1__.default)({\n    color: color,\n    title: \"Vaccinated Population (%)\",\n    width: 260\n  });\n}); // create tooltip\n\nvar tooltip = d3.select(\"body\").append(\"div\").attr(\"class\", \"tooltip\").style(\"position\", \"absolute\").style(\"display\", \"flex\").style(\"flex-direction\", \"column\").style(\"align-items\", \"center\").style(\"background-color\", \"white\").style(\"border\", \"1px solid\").style(\"border-radius\", \"5px\").style(\"width\", \"25%\").style(\"height\", \"82px\").style(\"padding\", \"15px\").style(\"padding-bottom\", \"20px\").style(\"visibility\", \"hidden\");\nPromise.all([usAlbersJson, stateVaxCSV, statePopulationObj]).then(function (values) {\n  drawMap(values[0], stateVaxRecords, values[2]);\n});\n\nvar drawMap = function drawMap(usTopoData, stateVax, statePopulation) {\n  try {\n    // new york === new york state in stateVaxObx\n    var statePercentage;\n    var stateTotalVaccinated;\n    svg.append(\"g\").attr(\"class\", \"states\").selectAll(\"path\").data(topojson.feature(usTopoData, usTopoData.objects.states).features) // binding TopoJSON data elements\n    .enter().append(\"path\").attr(\"fill\", function (d) {\n      var stateName = d.properties.name; // stateName has other territories of the united states like Virigin Islands included\n\n      var percentage = statePopulation[stateName] ? stateName === \"New York\" ? stateVax[\"New York State\"].people_fully_vaccinated / statePopulation[stateName] * 100 : stateVax[stateName].people_fully_vaccinated / statePopulation[stateName] * 100 : 0; // turning percentage into a float with 2 decimal points\n\n      percentage = Number.parseFloat(percentage).toPrecision(4); // let increasedPercentage;\n      // // must check the time to see which Vax obj to use\n      // if (day.getHours() < 13) {\n      //   // use twoDaysAgo obj\n      //   // first check if the state !== to a territory\n      //   increasedPercentage = statePopulation[stateName]\n      //     ? stateName === \"New York\"\n      //       ? percentage -\n      //         (twoDaysAgoStateTotalVax[\"New York State\"] /\n      //           statePopulation[stateName]) *\n      //           100\n      //       : percentage -\n      //         (twoDaysAgoStateTotalVax[stateName] /\n      //           statePopulation[stateName]) *\n      //           100\n      //     : 0;\n      // } else {\n      //   increasedPercentage = statePopulation[stateName]\n      //     ? stateName === \"New York\"\n      //       ? percentage -\n      //         (previousDayStateTotalVax[\"New York State\"] /\n      //           statePopulation[stateName]) *\n      //           100\n      //       : percentage -\n      //         (previousDayStateTotalVax[stateName] /\n      //           statePopulation[stateName]) *\n      //           100\n      //     : 0;\n      // }\n      // increasedPercentage = Number.parseFloat(\n      //   increasedPercentage\n      // ).toPrecision(4);\n\n      var increasedAmount;\n\n      if (day.getHours() < 13) {\n        // use twoDaysAgo obj\n        // first check if the state !== to a territory\n        increasedAmount = statePopulation[stateName] ? stateName === \"New York\" ? stateVax[\"New York State\"].people_fully_vaccinated - twoDaysAgoStateTotalVax[\"New York State\"] : stateVax[stateName].people_fully_vaccinated - twoDaysAgoStateTotalVax[stateName] : 0;\n      } else {\n        increasedAmount = statePopulation[stateName] ? stateName === \"New York\" ? stateVax[\"New York State\"].people_fully_vaccinated - previousDayStateTotalVax[\"New York State\"] : stateVax[stateName].people_fully_vaccinated - previousDayStateTotalVax[stateName] : 0;\n      }\n\n      d.properties.percentage = percentage; // d.properties.increasedPercentage = increasedPercentage;\n\n      d.properties.increasedAmount = increasedAmount;\n      d.properties.statePopulation = statePopulation[stateName];\n      d.properties.date = date;\n      d.properties.fully_vaccinated = stateName === \"New York\" ? stateVax[\"New York State\"].people_fully_vaccinated : stateVax[stateName].people_fully_vaccinated;\n      var col = color(percentage);\n      return col;\n    }).attr(\"d\", path).on(\"mouseover\", function (d) {\n      var _d$properties = d.properties,\n          name = _d$properties.name,\n          percentage = _d$properties.percentage,\n          statePopulation = _d$properties.statePopulation,\n          fully_vaccinated = _d$properties.fully_vaccinated,\n          date = _d$properties.date,\n          increasedAmount = _d$properties.increasedAmount;\n      tooltip.transition().duration(200).style(\"opacity\", 0.9);\n      tooltip.html(\"\\n         <div\\n         style=\\\"position: absolute;  display: flex; justify-content: center; align-items: center;\\n          flex-direction: column;\\\"\\n          >\\n            <span>\".concat(name, \" (as of \").concat(date, \")</span>\\n            <span>Population (as of 2019): \").concat(statePopulation, \"</span>\\n            <span>Number of people vaccinated: \").concat(fully_vaccinated, \"</span>\\n            <span>Increase from the previous day: \").concat(increasedAmount, \" people</span>\\n            <span>Percentage of people vaccinated: \").concat(percentage, \"%</span>\\n          </div>\\n          \"));\n    }).on(\"mouseout\", function (d) {\n      d3.select(\".tooltip\").transition().duration(200).style(\"visibility\", \"visible\").style(\"opacity\", 0);\n    }).on(\"mousemove\", function () {\n      d3.select(\".tooltip\").style(\"visibility\", \"visible\").style(\"left\", d3.event.pageX + \"px\").style(\"top\", d3.event.pageY + \"px\");\n    });\n    svg.append(\"path\").datum(topojson.mesh(usTopoData, usTopoData.objects.states, function (a, b) {\n      return a !== b;\n    })).attr(\"fill\", \"none\").attr(\"stroke\", \"#485063\") // .attr(\"stroke\", \"white\")\n    .attr(\"stroke-linejoin\", \"round\").attr(\"d\", path);\n    d3.select(\"svg\").selectAll(\".states\");\n  } catch (e) {\n    console.log(\"error: \", e);\n  }\n};\n\n//# sourceURL=webpack://covid-visualization/./src/index.js?");

/***/ }),

/***/ "./node_modules/htl/src/index.js":
/*!***************************************!*\
  !*** ./node_modules/htl/src/index.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"html\": () => /* binding */ html,\n/* harmony export */   \"svg\": () => /* binding */ svg\n/* harmony export */ });\nfunction renderHtml(string) {\n  const template = document.createElement(\"template\");\n  template.innerHTML = string;\n  return document.importNode(template.content, true);\n}\n\nfunction renderSvg(string) {\n  const g = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\n  g.innerHTML = string;\n  return g;\n}\n\nconst html = Object.assign(hypertext(renderHtml, fragment => {\n  if (fragment.firstChild === null) return null;\n  if (fragment.firstChild === fragment.lastChild) return fragment.removeChild(fragment.firstChild);\n  const span = document.createElement(\"span\");\n  span.appendChild(fragment);\n  return span;\n}), {fragment: hypertext(renderHtml, fragment => fragment)});\n\nconst svg = Object.assign(hypertext(renderSvg, g => {\n  if (g.firstChild === null) return null;\n  if (g.firstChild === g.lastChild) return g.removeChild(g.firstChild);\n  return g;\n}), {fragment: hypertext(renderSvg, g => {\n  const fragment = document.createDocumentFragment();\n  while (g.firstChild) fragment.appendChild(g.firstChild);\n  return fragment;\n})});\n\nconst\nCODE_TAB = 9,\nCODE_LF = 10,\nCODE_FF = 12,\nCODE_CR = 13,\nCODE_SPACE = 32,\nCODE_UPPER_A = 65,\nCODE_UPPER_Z = 90,\nCODE_LOWER_A = 97,\nCODE_LOWER_Z = 122,\nCODE_LT = 60,\nCODE_GT = 62,\nCODE_SLASH = 47,\nCODE_DASH = 45,\nCODE_BANG = 33,\nCODE_EQ = 61,\nCODE_DQUOTE = 34,\nCODE_SQUOTE = 39,\nCODE_QUESTION = 63,\nSTATE_DATA = 1,\nSTATE_TAG_OPEN = 2,\nSTATE_END_TAG_OPEN = 3,\nSTATE_TAG_NAME = 4,\nSTATE_BOGUS_COMMENT = 5,\nSTATE_BEFORE_ATTRIBUTE_NAME = 6,\nSTATE_AFTER_ATTRIBUTE_NAME = 7,\nSTATE_ATTRIBUTE_NAME = 8,\nSTATE_BEFORE_ATTRIBUTE_VALUE = 9,\nSTATE_ATTRIBUTE_VALUE_DOUBLE_QUOTED = 10,\nSTATE_ATTRIBUTE_VALUE_SINGLE_QUOTED = 11,\nSTATE_ATTRIBUTE_VALUE_UNQUOTED = 12,\nSTATE_AFTER_ATTRIBUTE_VALUE_QUOTED = 13,\nSTATE_SELF_CLOSING_START_TAG = 14,\nSTATE_COMMENT_START = 15,\nSTATE_COMMENT_START_DASH = 16,\nSTATE_COMMENT = 17,\nSTATE_COMMENT_LESS_THAN_SIGN = 18,\nSTATE_COMMENT_LESS_THAN_SIGN_BANG = 19,\nSTATE_COMMENT_LESS_THAN_SIGN_BANG_DASH = 20,\nSTATE_COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH = 21,\nSTATE_COMMENT_END_DASH = 22,\nSTATE_COMMENT_END = 23,\nSTATE_COMMENT_END_BANG = 24,\nSTATE_MARKUP_DECLARATION_OPEN = 25,\nSTATE_RAWTEXT = 26,\nSTATE_RAWTEXT_LESS_THAN_SIGN = 27,\nSTATE_RAWTEXT_END_TAG_OPEN = 28,\nSTATE_RAWTEXT_END_TAG_NAME = 29,\nSHOW_COMMENT = 128,\nSHOW_ELEMENT = 1,\nTYPE_COMMENT = 8,\nTYPE_ELEMENT = 1,\nNS_SVG = \"http://www.w3.org/2000/svg\",\nNS_XLINK = \"http://www.w3.org/1999/xlink\",\nNS_XML = \"http://www.w3.org/XML/1998/namespace\",\nNS_XMLNS = \"http://www.w3.org/2000/xmlns/\";\n\nconst svgAdjustAttributes = new Map([\n  \"attributeName\",\n  \"attributeType\",\n  \"baseFrequency\",\n  \"baseProfile\",\n  \"calcMode\",\n  \"clipPathUnits\",\n  \"diffuseConstant\",\n  \"edgeMode\",\n  \"filterUnits\",\n  \"glyphRef\",\n  \"gradientTransform\",\n  \"gradientUnits\",\n  \"kernelMatrix\",\n  \"kernelUnitLength\",\n  \"keyPoints\",\n  \"keySplines\",\n  \"keyTimes\",\n  \"lengthAdjust\",\n  \"limitingConeAngle\",\n  \"markerHeight\",\n  \"markerUnits\",\n  \"markerWidth\",\n  \"maskContentUnits\",\n  \"maskUnits\",\n  \"numOctaves\",\n  \"pathLength\",\n  \"patternContentUnits\",\n  \"patternTransform\",\n  \"patternUnits\",\n  \"pointsAtX\",\n  \"pointsAtY\",\n  \"pointsAtZ\",\n  \"preserveAlpha\",\n  \"preserveAspectRatio\",\n  \"primitiveUnits\",\n  \"refX\",\n  \"refY\",\n  \"repeatCount\",\n  \"repeatDur\",\n  \"requiredExtensions\",\n  \"requiredFeatures\",\n  \"specularConstant\",\n  \"specularExponent\",\n  \"spreadMethod\",\n  \"startOffset\",\n  \"stdDeviation\",\n  \"stitchTiles\",\n  \"surfaceScale\",\n  \"systemLanguage\",\n  \"tableValues\",\n  \"targetX\",\n  \"targetY\",\n  \"textLength\",\n  \"viewBox\",\n  \"viewTarget\",\n  \"xChannelSelector\",\n  \"yChannelSelector\",\n  \"zoomAndPan\"\n].map(name => [name.toLowerCase(), name]));\n\nconst svgForeignAttributes = new Map([\n  [\"xlink:actuate\", NS_XLINK],\n  [\"xlink:arcrole\", NS_XLINK],\n  [\"xlink:href\", NS_XLINK],\n  [\"xlink:role\", NS_XLINK],\n  [\"xlink:show\", NS_XLINK],\n  [\"xlink:title\", NS_XLINK],\n  [\"xlink:type\", NS_XLINK],\n  [\"xml:lang\", NS_XML],\n  [\"xml:space\", NS_XML],\n  [\"xmlns\", NS_XMLNS],\n  [\"xmlns:xlink\", NS_XMLNS]\n]);\n\nfunction hypertext(render, postprocess) {\n  return function({raw: strings}) {\n    let state = STATE_DATA;\n    let string = \"\";\n    let tagNameStart; // either an open tag or an end tag\n    let tagName; // only open; beware nesting! used only for rawtext\n    let attributeNameStart;\n    let attributeNameEnd;\n    let nodeFilter = 0;\n\n    for (let j = 0, m = arguments.length; j < m; ++j) {\n      const input = strings[j];\n\n      if (j > 0) {\n        const value = arguments[j];\n        switch (state) {\n          case STATE_RAWTEXT: {\n            if (value != null) {\n              const text = value + \"\";\n              if (isEscapableRawText(tagName)) {\n                string += text.replace(/[<]/g, entity);\n              } else if (new RegExp(`</${tagName}[\\\\s>/]`, \"i\").test(string.slice(-tagName.length - 2) + text)) {\n                throw new Error(\"unsafe raw text\"); // appropriate end tag\n              } else {\n                string += text;\n              }\n            }\n            break;\n          }\n          case STATE_DATA: {\n            if (value == null) {\n              // ignore\n            } else if (value instanceof Node\n                || (typeof value !== \"string\" && value[Symbol.iterator])\n                || (/(?:^|>)$/.test(strings[j - 1]) && /^(?:<|$)/.test(input))) {\n              string += \"<!--::\" + j + \"-->\";\n              nodeFilter |= SHOW_COMMENT;\n            } else {\n              string += (value + \"\").replace(/[<&]/g, entity);\n            }\n            break;\n          }\n          case STATE_BEFORE_ATTRIBUTE_VALUE: {\n            state = STATE_ATTRIBUTE_VALUE_UNQUOTED;\n            let text;\n            if (/^[\\s>]/.test(input)) {\n              if (value == null || value === false) {\n                string = string.slice(0, attributeNameStart - strings[j - 1].length);\n                break;\n              }\n              if (value === true || (text = value + \"\") === \"\") {\n                string += \"''\";\n                break;\n              }\n              const name = strings[j - 1].slice(attributeNameStart, attributeNameEnd);\n              if ((name === \"style\" && isObjectLiteral(value)) || typeof value === \"function\") {\n                string += \"::\" + j;\n                nodeFilter |= SHOW_ELEMENT;\n                break;\n              }\n            }\n            if (text === undefined) text = value + \"\";\n            if (text === \"\") throw new Error(\"unsafe unquoted empty string\");\n            string += text.replace(/^['\"]|[\\s>&]/g, entity);\n            break;\n          }\n          case STATE_ATTRIBUTE_VALUE_UNQUOTED: {\n            string += (value + \"\").replace(/[\\s>&]/g, entity);\n            break;\n          }\n          case STATE_ATTRIBUTE_VALUE_SINGLE_QUOTED: {\n            string += (value + \"\").replace(/['&]/g, entity);\n            break;\n          }\n          case STATE_ATTRIBUTE_VALUE_DOUBLE_QUOTED: {\n            string += (value + \"\").replace(/[\"&]/g, entity);\n            break;\n          }\n          case STATE_BEFORE_ATTRIBUTE_NAME: {\n            if (isObjectLiteral(value)) {\n              string += \"::\" + j + \"=''\";\n              nodeFilter |= SHOW_ELEMENT;\n              break;\n            }\n            throw new Error(\"invalid binding\");\n          }\n          case STATE_COMMENT: break;\n          default: throw new Error(\"invalid binding\");\n        }\n      }\n\n      for (let i = 0, n = input.length; i < n; ++i) {\n        const code = input.charCodeAt(i);\n\n        switch (state) {\n          case STATE_DATA: {\n            if (code === CODE_LT) {\n              state = STATE_TAG_OPEN;\n            }\n            break;\n          }\n          case STATE_TAG_OPEN: {\n            if (code === CODE_BANG) {\n              state = STATE_MARKUP_DECLARATION_OPEN;\n            } else if (code === CODE_SLASH) {\n              state = STATE_END_TAG_OPEN;\n            } else if (isAsciiAlphaCode(code)) {\n              tagNameStart = i, tagName = undefined;\n              state = STATE_TAG_NAME, --i;\n            } else if (code === CODE_QUESTION) {\n              state = STATE_BOGUS_COMMENT, --i;\n            } else {\n              state = STATE_DATA, --i;\n            }\n            break;\n          }\n          case STATE_END_TAG_OPEN: {\n            if (isAsciiAlphaCode(code)) {\n              state = STATE_TAG_NAME, --i;\n            } else if (code === CODE_GT) {\n              state = STATE_DATA;\n            } else {\n              state = STATE_BOGUS_COMMENT, --i;\n            }\n            break;\n          }\n          case STATE_TAG_NAME: {\n            if (isSpaceCode(code)) {\n              state = STATE_BEFORE_ATTRIBUTE_NAME;\n              tagName = lower(input, tagNameStart, i);\n            } else if (code === CODE_SLASH) {\n              state = STATE_SELF_CLOSING_START_TAG;\n            } else if (code === CODE_GT) {\n              tagName = lower(input, tagNameStart, i);\n              state = isRawText(tagName) ? STATE_RAWTEXT : STATE_DATA;\n            }\n            break;\n          }\n          case STATE_BEFORE_ATTRIBUTE_NAME: {\n            if (isSpaceCode(code)) {\n              // continue\n            } else if (code === CODE_SLASH || code === CODE_GT) {\n              state = STATE_AFTER_ATTRIBUTE_NAME, --i;\n            } else if (code === CODE_EQ) {\n              state = STATE_ATTRIBUTE_NAME;\n              attributeNameStart = i + 1, attributeNameEnd = undefined;\n            } else {\n              state = STATE_ATTRIBUTE_NAME, --i;\n              attributeNameStart = i + 1, attributeNameEnd = undefined;\n            }\n            break;\n          }\n          case STATE_ATTRIBUTE_NAME: {\n            if (isSpaceCode(code) || code === CODE_SLASH || code === CODE_GT) {\n              state = STATE_AFTER_ATTRIBUTE_NAME, --i;\n              attributeNameEnd = i;\n            } else if (code === CODE_EQ) {\n              state = STATE_BEFORE_ATTRIBUTE_VALUE;\n              attributeNameEnd = i;\n            }\n            break;\n          }\n          case STATE_AFTER_ATTRIBUTE_NAME: {\n            if (isSpaceCode(code)) {\n              // ignore\n            } else if (code === CODE_SLASH) {\n              state = STATE_SELF_CLOSING_START_TAG;\n            } else if (code === CODE_EQ) {\n              state = STATE_BEFORE_ATTRIBUTE_VALUE;\n            } else if (code === CODE_GT) {\n              state = isRawText(tagName) ? STATE_RAWTEXT : STATE_DATA;\n            } else {\n              state = STATE_ATTRIBUTE_NAME, --i;\n              attributeNameStart = i + 1, attributeNameEnd = undefined;\n            }\n            break;\n          }\n          case STATE_BEFORE_ATTRIBUTE_VALUE: {\n            if (isSpaceCode(code)) {\n              // continue\n            } else if (code === CODE_DQUOTE) {\n              state = STATE_ATTRIBUTE_VALUE_DOUBLE_QUOTED;\n            } else if (code === CODE_SQUOTE) {\n              state = STATE_ATTRIBUTE_VALUE_SINGLE_QUOTED;\n            } else if (code === CODE_GT) {\n              state = isRawText(tagName) ? STATE_RAWTEXT : STATE_DATA;\n            } else {\n              state = STATE_ATTRIBUTE_VALUE_UNQUOTED, --i;\n            }\n            break;\n          }\n          case STATE_ATTRIBUTE_VALUE_DOUBLE_QUOTED: {\n            if (code === CODE_DQUOTE) {\n              state = STATE_AFTER_ATTRIBUTE_VALUE_QUOTED;\n            }\n            break;\n          }\n          case STATE_ATTRIBUTE_VALUE_SINGLE_QUOTED: {\n            if (code === CODE_SQUOTE) {\n              state = STATE_AFTER_ATTRIBUTE_VALUE_QUOTED;\n            }\n            break;\n          }\n          case STATE_ATTRIBUTE_VALUE_UNQUOTED: {\n            if (isSpaceCode(code)) {\n              state = STATE_BEFORE_ATTRIBUTE_NAME;\n            } else if (code === CODE_GT) {\n              state = isRawText(tagName) ? STATE_RAWTEXT : STATE_DATA;\n            }\n            break;\n          }\n          case STATE_AFTER_ATTRIBUTE_VALUE_QUOTED: {\n            if (isSpaceCode(code)) {\n              state = STATE_BEFORE_ATTRIBUTE_NAME;\n            } else if (code === CODE_SLASH) {\n              state = STATE_SELF_CLOSING_START_TAG;\n            } else if (code === CODE_GT) {\n              state = isRawText(tagName) ? STATE_RAWTEXT : STATE_DATA;\n            } else {\n              state = STATE_BEFORE_ATTRIBUTE_NAME, --i;\n            }\n            break;\n          }\n          case STATE_SELF_CLOSING_START_TAG: {\n            if (code === CODE_GT) {\n              state = STATE_DATA;\n            } else {\n              state = STATE_BEFORE_ATTRIBUTE_NAME, --i;\n            }\n            break;\n          }\n          case STATE_BOGUS_COMMENT: {\n            if (code === CODE_GT) {\n              state = STATE_DATA;\n            }\n            break;\n          }\n          case STATE_COMMENT_START: {\n            if (code === CODE_DASH) {\n              state = STATE_COMMENT_START_DASH;\n            } else if (code === CODE_GT) {\n              state = STATE_DATA;\n            } else {\n              state = STATE_COMMENT, --i;\n            }\n            break;\n          }\n          case STATE_COMMENT_START_DASH: {\n            if (code === CODE_DASH) {\n              state = STATE_COMMENT_END;\n            } else if (code === CODE_GT) {\n              state = STATE_DATA;\n            } else {\n              state = STATE_COMMENT, --i;\n            }\n            break;\n          }\n          case STATE_COMMENT: {\n            if (code === CODE_LT) {\n              state = STATE_COMMENT_LESS_THAN_SIGN;\n            } else if (code === CODE_DASH) {\n              state = STATE_COMMENT_END_DASH;\n            }\n            break;\n          }\n          case STATE_COMMENT_LESS_THAN_SIGN: {\n            if (code === CODE_BANG) {\n              state = STATE_COMMENT_LESS_THAN_SIGN_BANG;\n            } else if (code !== CODE_LT) {\n              state = STATE_COMMENT, --i;\n            }\n            break;\n          }\n          case STATE_COMMENT_LESS_THAN_SIGN_BANG: {\n            if (code === CODE_DASH) {\n              state = STATE_COMMENT_LESS_THAN_SIGN_BANG_DASH;\n            } else {\n              state = STATE_COMMENT, --i;\n            }\n            break;\n          }\n          case STATE_COMMENT_LESS_THAN_SIGN_BANG_DASH: {\n            if (code === CODE_DASH) {\n              state = STATE_COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH;\n            } else {\n              state = STATE_COMMENT_END, --i;\n            }\n            break;\n          }\n          case STATE_COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH: {\n            state = STATE_COMMENT_END, --i;\n            break;\n          }\n          case STATE_COMMENT_END_DASH: {\n            if (code === CODE_DASH) {\n              state = STATE_COMMENT_END;\n            } else {\n              state = STATE_COMMENT, --i;\n            }\n            break;\n          }\n          case STATE_COMMENT_END: {\n            if (code === CODE_GT) {\n              state = STATE_DATA;\n            } else if (code === CODE_BANG) {\n              state = STATE_COMMENT_END_BANG;\n            } else if (code !== CODE_DASH) {\n              state = STATE_COMMENT, --i;\n            }\n            break;\n          }\n          case STATE_COMMENT_END_BANG: {\n            if (code === CODE_DASH) {\n              state = STATE_COMMENT_END_DASH;\n            } else if (code === CODE_GT) {\n              state = STATE_DATA;\n            } else {\n              state = STATE_COMMENT, --i;\n            }\n            break;\n          }\n          case STATE_MARKUP_DECLARATION_OPEN: {\n            if (code === CODE_DASH && input.charCodeAt(i + 1) === CODE_DASH) {\n              state = STATE_COMMENT_START, ++i;\n            } else { // Note: CDATA and DOCTYPE unsupported!\n              state = STATE_BOGUS_COMMENT, --i;\n            }\n            break;\n          }\n          case STATE_RAWTEXT: {\n            if (code === CODE_LT) {\n              state = STATE_RAWTEXT_LESS_THAN_SIGN;\n            }\n            break;\n          }\n          case STATE_RAWTEXT_LESS_THAN_SIGN: {\n            if (code === CODE_SLASH) {\n              state = STATE_RAWTEXT_END_TAG_OPEN;\n            } else {\n              state = STATE_RAWTEXT, --i;\n            }\n            break;\n          }\n          case STATE_RAWTEXT_END_TAG_OPEN: {\n            if (isAsciiAlphaCode(code)) {\n              tagNameStart = i;\n              state = STATE_RAWTEXT_END_TAG_NAME, --i;\n            } else {\n              state = STATE_RAWTEXT, --i;\n            }\n            break;\n          }\n          case STATE_RAWTEXT_END_TAG_NAME: {\n            if (isSpaceCode(code) && tagName === lower(input, tagNameStart, i)) {\n              state = STATE_BEFORE_ATTRIBUTE_NAME;\n            } else if (code === CODE_SLASH && tagName === lower(input, tagNameStart, i)) {\n              state = STATE_SELF_CLOSING_START_TAG;\n            } else if (code === CODE_GT && tagName === lower(input, tagNameStart, i)) {\n              state = STATE_DATA;\n            } else if (!isAsciiAlphaCode(code)) {\n              state = STATE_RAWTEXT, --i;\n            }\n            break;\n          }\n          default: {\n            state = undefined;\n            break;\n          }\n        }\n      }\n\n      string += input;\n    }\n\n    const root = render(string);\n\n    const walker = document.createTreeWalker(root, nodeFilter, null, false);\n    const removeNodes = [];\n    while (walker.nextNode()) {\n      const node = walker.currentNode;\n      switch (node.nodeType) {\n        case TYPE_ELEMENT: {\n          const attributes = node.attributes;\n          for (let i = 0, n = attributes.length; i < n; ++i) {\n            const {name, value: currentValue} = attributes[i];\n            if (/^::/.test(name)) {\n              const value = arguments[+name.slice(2)];\n              removeAttribute(node, name), --i, --n;\n              for (const key in value) {\n                const subvalue = value[key];\n                if (subvalue == null || subvalue === false) {\n                  // ignore\n                } else if (typeof subvalue === \"function\") {\n                  node[key] = subvalue;\n                } else if (key === \"style\" && isObjectLiteral(subvalue)) {\n                  setStyles(node[key], subvalue);\n                } else {\n                  setAttribute(node, key, subvalue === true ? \"\" : subvalue);\n                }\n              }\n            } else if (/^::/.test(currentValue)) {\n              const value = arguments[+currentValue.slice(2)];\n              removeAttribute(node, name), --i, --n;\n              if (typeof value === \"function\") {\n                node[name] = value;\n              } else { // style\n                setStyles(node[name], value);\n              }\n            }\n          }\n          break;\n        }\n        case TYPE_COMMENT: {\n          if (/^::/.test(node.data)) {\n            const parent = node.parentNode;\n            const value = arguments[+node.data.slice(2)];\n            if (value instanceof Node) {\n              parent.insertBefore(value, node);\n            } else if (typeof value !== \"string\" && value[Symbol.iterator]) {\n              if (value instanceof NodeList || value instanceof HTMLCollection) {\n                for (let i = value.length - 1, r = node; i >= 0; --i) {\n                  r = parent.insertBefore(value[i], r);\n                }\n              } else {\n                for (const subvalue of value) {\n                  if (subvalue == null) continue;\n                  parent.insertBefore(subvalue instanceof Node ? subvalue : document.createTextNode(subvalue), node);\n                }\n              }\n            } else {\n              parent.insertBefore(document.createTextNode(value), node);\n            }\n            removeNodes.push(node);\n          }\n          break;\n        }\n      }\n    }\n\n    for (const node of removeNodes) {\n      node.parentNode.removeChild(node);\n    }\n\n    return postprocess(root);\n  };\n}\n\nfunction entity(character) {\n  return `&#${character.charCodeAt(0).toString()};`;\n}\n\nfunction isAsciiAlphaCode(code) {\n  return (CODE_UPPER_A <= code && code <= CODE_UPPER_Z)\n      || (CODE_LOWER_A <= code && code <= CODE_LOWER_Z);\n}\n\nfunction isSpaceCode(code) {\n  return code === CODE_TAB\n      || code === CODE_LF\n      || code === CODE_FF\n      || code === CODE_SPACE\n      || code === CODE_CR; // normalize newlines\n}\n\nfunction isObjectLiteral(value) {\n  return value && value.toString === Object.prototype.toString;\n}\n\nfunction isRawText(tagName) {\n  return tagName === \"script\" || tagName === \"style\" || isEscapableRawText(tagName);\n}\n\nfunction isEscapableRawText(tagName) {\n  return tagName === \"textarea\" || tagName === \"title\";\n}\n\nfunction lower(input, start, end) {\n  return input.slice(start, end).toLowerCase();\n}\n\nfunction setAttribute(node, name, value) {\n  if (node.namespaceURI === NS_SVG) {\n    name = name.toLowerCase();\n    name = svgAdjustAttributes.get(name) || name;\n    if (svgForeignAttributes.has(name)) {\n      node.setAttributeNS(svgForeignAttributes.get(name), name, value);\n      return;\n    }\n  }\n  node.setAttribute(name, value);\n}\n\nfunction removeAttribute(node, name) {\n  if (node.namespaceURI === NS_SVG) {\n    name = name.toLowerCase();\n    name = svgAdjustAttributes.get(name) || name;\n    if (svgForeignAttributes.has(name)) {\n      node.removeAttributeNS(svgForeignAttributes.get(name), name);\n      return;\n    }\n  }\n  node.removeAttribute(name);\n}\n\n// We canâ€™t use Object.assign because custom propertiesâ€¦\nfunction setStyles(style, values) {\n  for (const name in values) {\n    const value = values[name];\n    if (name.startsWith(\"--\")) style.setProperty(name, value);\n    else style[name] = value;\n  }\n}\n\n\n//# sourceURL=webpack://covid-visualization/./node_modules/htl/src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	// startup
/******/ 	// Load entry module
/******/ 	__webpack_require__("./src/index.js");
/******/ 	// This entry module used 'exports' so it can't be inlined
/******/ })()
;
>>>>>>> 8ce980aece76835652471a1b06c3aebdc6111230
